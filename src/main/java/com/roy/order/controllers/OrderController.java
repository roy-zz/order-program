package com.roy.order.controllers;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import com.roy.order.base.configurations.constants.AppConstant;import com.roy.order.base.dtos.payment.PaymentResultDTO;import com.roy.order.base.dtos.product.ProductDTO;import com.roy.order.base.dtos.product.ProductOrderDTO;import com.roy.order.base.enums.product.ProductType;import com.roy.order.base.exceptions.AbstractErrorException;import com.roy.order.base.exceptions.AbstractInfoException;import com.roy.order.base.exceptions.AbstractWarnException;import com.roy.order.base.utils.Utils;import com.roy.order.services.OrderService;import org.springframework.context.annotation.Profile;import org.springframework.core.annotation.Order;import org.springframework.stereotype.Component;import java.util.ArrayList;import java.util.List;@Slf4j@Order(2)@Component@Profile("!test")@RequiredArgsConstructorpublic class OrderController extends AbstractController {    private final OrderService orderService;    @Override    public void run(String... args) throws Exception {        List<ProductDTO> allProducts = orderService.getAllProducts();        String stringValueOfProducts = "\n상품번호                상품명           판매가격            재고수 ";        for (ProductDTO dto : allProducts) {            stringValueOfProducts = String.format("%s\n%s %s %s %s", stringValueOfProducts, dto.getNumber(), dto.getName(), dto.getPrice(), dto.getStockCount());        }        log.info("{}", stringValueOfProducts);        List<ProductOrderDTO> baskets = new ArrayList<>();        orderingOut:        while (true) {            try {                while (true) {                    ProductOrderDTO orderingProduct = new ProductOrderDTO();                    log.info("{}", "\n상품번호 : ");                    String inputProductNumber = scanner.nextLine();                    if (inputProductNumber.equals(AppConstant.Command.PAYMENT)) {                        PaymentResultDTO paymentResult = orderService.paymentProductsInBasket(baskets);                        log.info("{}", "주문 내역:");                        log.info("{}", AppConstant.Common.LINE_SPLIT);                        for (ProductOrderDTO dto : paymentResult.getTotalProducts()) {                            log.info("{} - {}", dto.getProductDTO().getName(), dto.getOrderCount());                        }                        log.info("{}", AppConstant.Common.LINE_SPLIT);                        log.info("주문금액: {}원", Utils.transNumberToDefaultPriceFormat(paymentResult.getProductTotalPrice()));                        if (paymentResult.getDeliveryCharge() > 0) {                            log.info("배송비: {}원", Utils.transNumberToDefaultPriceFormat(paymentResult.getDeliveryCharge()));                        }                        log.info("{}", AppConstant.Common.LINE_SPLIT);                        log.info("지불금액: {}원", Utils.transNumberToDefaultPriceFormat(paymentResult.getProductTotalPrice() + paymentResult.getDeliveryCharge()));                        log.info("{}", AppConstant.Common.LINE_SPLIT);                        baskets.clear();                        break orderingOut;                    }                    else {                        orderingProduct = orderService.setWantToOrderProduct(allProducts, baskets, orderingProduct, inputProductNumber);                    }                    log.info("{}", "\n수량 : ");                    String inputProductCount = scanner.nextLine();                    if (orderingProduct.getProductDTO().getType().equals(String.valueOf(ProductType.KLASS))) {                        orderingProduct.setOrderCount(1);                    }                    else {                        orderingProduct = orderService.setWantToOrderCount(orderingProduct, inputProductCount);                    }                    baskets.add(orderingProduct);                }            } catch (AbstractInfoException exception) {                log.info("{}", exception.getCode().getMessage());            } catch (AbstractWarnException exception) {                log.warn("{}", exception.getCode().getMessage());            } catch (AbstractErrorException exception) {                log.error("{}", exception.getCode().getMessage());            } catch (Exception exception) {                log.info("{}", AppConstant.InformationMessage.UNEXPECTED_EXCEPTION);            }        }    }}